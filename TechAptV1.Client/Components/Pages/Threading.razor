@page "/threading"
@using TechAptV1.Client.Services

<h3>Threading &amp; Data Persistence</h3>

<div>
    <button class="btn btn-primary" @onclick="Start" disabled="@_isComputing">Start</button>
    <button class="btn btn-success" @onclick="Save" disabled="@( !_canSave )">Save</button>
</div>

@if (_isComputing)
{
    <div class="mt-3 text-info d-flex align-items-center gap-2">
        <div class="spinner-border spinner-border-sm" role="status"></div>
        <span>Generating numbers, please wait...</span>
    </div>
}
else
{
    <div>
        <hr>
        <h4>Numbers:</h4>
        <ul>
            <li>Odd: <strong>@this._oddNumbers</strong></li>
            <li>Even: <strong>@this._evenNumbers</strong></li>
            <li>Prime: <strong>@this._primeNumbers</strong></li>
            <li>Total: <strong>@this._totalNumbers</strong></li>
        </ul>
        <hr>
    </div>
}


@code {

    //Dependencies
    [Inject] public required ILogger<Threading> Logger { get; set; }
    [Inject] public required ThreadingService ThreadingService { get; set; }

    //State
    private int _oddNumbers = 0;
    private int _evenNumbers = 0;
    private int _primeNumbers = 0;
    private int _totalNumbers = 0;

    private bool _canSave = false;
    private bool _isComputing = false;
    
    //Methods
    private async Task Start()
    {
        try
        {
            this.Logger.LogInformation("Start");
            _isComputing = true;
            _canSave = false;

            StateHasChanged(); // Immediately update button states

            await ThreadingService.Start();

            // Fetch computed values
            _oddNumbers = ThreadingService.GetOddNumbers();
            _evenNumbers = ThreadingService.GetEvenNumbers();
            _primeNumbers = ThreadingService.GetPrimeNumbers();
            _totalNumbers = ThreadingService.GetTotalNumbers();

            _canSave = true; // Data ready for saving
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during computation.");
        }
        finally
        {
            _isComputing = false;
            StateHasChanged();
        }
    }

    private async Task Save()
    {
        this.Logger.LogInformation("Save");
        throw new NotImplementedException();
    }
}
