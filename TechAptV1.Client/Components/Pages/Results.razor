@page "/results"
@using System.Xml.Serialization
@using System.Text
@using TechAptV1.Client.Models
@using TechAptV1.Client.Services
@inject IJSRuntime JS

<h3>Results</h3>
<p>The table shows the top N numbers generated. The download XML and Binary feature allows you to download the entire data set</p>

@if (_isBusy)
{
    <div class="mt-3 text-success d-flex align-items-center gap-2">
        <div class="spinner-border spinner-border-sm" role="status"></div>
        <span>Processing, please wait...</span>
    </div>
}
else
{
    <div>
        <button class="btn btn-primary" @onclick="DownloadXml" disabled="@_isBusy">Download XML</button>
        <button class="btn btn-primary" @onclick="DownloadBinary" disabled="@_isBusy">Download Binary</button>

    </div>
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Value</th>
                    <th>IsPrime</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in this._top20Numbers)
                {
                    <tr>
                        <td>@item.Value</td>
                        <td>@item.IsPrime</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {

    //Dependencies
    [Inject] public required ILogger<Threading> Logger { get; set; }
    [Inject] public required DataService DataService { get; set; }

    //State
    private List<Number> _allNumbers = new();
    private List<Number> _top20Numbers = new();

    private bool _isBusy = false;

    //Initilaization
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!firstRender) return;
        Logger.LogInformation("OnAfterRenderAsync");

        try
        {
            if (_isBusy) return;
            _isBusy = true;
            StateHasChanged();

            this.Logger.LogInformation("Fetching data from the database");

            // Fetch the top 20 numbers from the database
            var data = await this.DataService.Get(20);
            if (data != null)
            {
                _top20Numbers = data.ToList();
                StateHasChanged();
            }
            Logger.LogInformation("Fetched {Count} records", _top20Numbers.Count);

            // Fetch all numbers from the database
            var allData = await this.DataService.GetAll();
            if (allData != null)
            {
                _allNumbers = allData.ToList();
                StateHasChanged();
            }
            Logger.LogInformation("Fetched {Count} records", _allNumbers.Count);

        }
        finally
        {
            _isBusy = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Fetches all the records, serializes them to XML and downloads the file
    /// </summary>
    private async Task DownloadXml()
    {
        try
        {
            if (_isBusy) return;
            _isBusy = true;
            StateHasChanged();

            this.Logger.LogInformation("DownloadXml");

            var xmlContent = await Task.Run(() =>
            {
                XmlSerializer serializer = new XmlSerializer(typeof(List<Number>));
                using var stringWriter = new StringWriter();
                serializer.Serialize(stringWriter, _allNumbers);
                return stringWriter.ToString();
            });

            var byteArray = Encoding.UTF8.GetBytes(xmlContent);
            await JS.InvokeVoidAsync("downloadFileFromByteArray", "numbers.xml", "application/xml", byteArray);
        }
        catch (Exception ex)
        {
            this.Logger.LogError(ex, "Error downloading XML");
        }
        finally
        {
            _isBusy = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Fetches all the records, serializes them to Binary and downloads the file
    /// </summary>
    private async Task DownloadBinary()
    {
        try
        {
            if (_isBusy) return;
            _isBusy = true;
            StateHasChanged();

            this.Logger.LogInformation("DownloadBinary");

            var binaryContent = await Task.Run(() =>
            {
                using var memoryStream = new MemoryStream();
                using var writer = new BinaryWriter(memoryStream);
                foreach (var record in _allNumbers)
                {
                    writer.Write(record.Value);
                    writer.Write(record.IsPrime);
                }
                return memoryStream.ToArray();
            });

            await JS.InvokeVoidAsync("downloadFile", "numbers.bin", "application/octet-stream", binaryContent);
        }
        catch (Exception ex)
        {
            this.Logger.LogError(ex, "Error downloading Binary");
        }
        finally
        {
            _isBusy = false;
            StateHasChanged();
        }
    }
}
